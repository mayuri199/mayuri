    // Generating student ids
    int *student_ids = (int *)malloc(sizeof(int) * no_of_students);
    for(int i = 0; i < no_of_students; i++)
        student_ids[i] = i + 1;
    
    pthread_t *student_thread = (pthread_t *)malloc(no_of_students *
 sizeof(pthread_t));
    pthread_t teacher_thread;

    // Initialization of mutex and semaphores
    sem_init(&student_sem, 0, 3); // pshared = 0(mid arg) means it'll be shared among only one process
    sem_init(&teacher_sem, 0, 1);
    memset(waiting_queue, -1, sizeof(int) * MAX_WAITING_CHAIRS);

    // Creating threads of teacher and student
    pthread_create(&teacher_thread, NULL, teacherProcess, NULL);
    for (int i = 0; i < no_of_students; i++)
    {
        pthread_create(&student_thread[i], NULL, &studentProcess, (void *) &student_ids[i]);
        sleep(1);
  }
    // Joining the threads to the main process
    pthread_join(teacher_thread, NULL);
    for (int i = 0; i < no_of_students; i++)
        pthread_join(student_thread[i], NULL);

    return 0;
}
void displayWaitingQueue()
{
    printf("%lld students are waiting in the seat queue\n", no_of_students_waiting);
    for(int i = 0; i < MAX_WAITING_CHAIRS; i++)
    {
        char this_person[30];
        if (waiting_queue[i] != -1)
            sprintf(this_person, "%d", waiting_queue[i]);
        else
            sprintf(this_person, "No one");
        printf("[%d] %s   ",i + 1, this_person);
  }
    printf("\n");
}
